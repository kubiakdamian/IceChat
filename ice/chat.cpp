// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserAlreadyExists> iceC_Chat_UserAlreadyExists_init("::Chat::UserAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoSuchUserExist> iceC_Chat_NoSuchUserExist_init("::Chat::NoSuchUserExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoSuchRoomExist> iceC_Chat_NoSuchRoomExist_init("::Chat::NoSuchRoomExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::RoomAlreadyExist> iceC_Chat_RoomAlreadyExist_init("::Chat::RoomAlreadyExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoResourcesAvailable> iceC_Chat_NoResourcesAvailable_init("::Chat::NoResourcesAvailable");

const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};
const ::std::string iceC_Chat_User_ops[] =
{
    "SendMessage",
    "SendPrivateMessage",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_User_SendMessage_name = "SendMessage";
const ::std::string iceC_Chat_User_SendPrivateMessage_name = "SendPrivateMessage";
const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_Server_ids[2] =
{
    "::Chat::Server",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Server_ops[] =
{
    "CreateRoom",
    "FindRoom",
    "RegisterRoomFactory",
    "UnregisterRoomFactory",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_Server_CreateRoom_name = "CreateRoom";
const ::std::string iceC_Chat_Server_getRooms_name = "getRooms";
const ::std::string iceC_Chat_Server_FindRoom_name = "FindRoom";
const ::std::string iceC_Chat_Server_RegisterRoomFactory_name = "RegisterRoomFactory";
const ::std::string iceC_Chat_Server_UnregisterRoomFactory_name = "UnregisterRoomFactory";

const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Room_ops[] =
{
    "AddUser",
    "Destroy",
    "LeaveRoom",
    "SendMessage",
    "getName",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_Room_getName_name = "getName";
const ::std::string iceC_Chat_Room_getUsers_name = "getUsers";
const ::std::string iceC_Chat_Room_AddUser_name = "AddUser";
const ::std::string iceC_Chat_Room_SendMessage_name = "SendMessage";
const ::std::string iceC_Chat_Room_Destroy_name = "Destroy";
const ::std::string iceC_Chat_Room_LeaveRoom_name = "LeaveRoom";

const ::std::string iceC_Chat_RoomFactory_ids[2] =
{
    "::Chat::RoomFactory",
    "::Ice::Object"
};
const ::std::string iceC_Chat_RoomFactory_ops[] =
{
    "createRoom",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_Chat_RoomFactory_createRoom_name = "createRoom";
const ::std::string iceC_Chat_RoomFactory_getRooms_name = "getRooms";

}

Chat::UserAlreadyExists::~UserAlreadyExists()
{
}

const ::std::string&
Chat::UserAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserAlreadyExists";
    return typeId;
}

Chat::NoSuchUserExist::~NoSuchUserExist()
{
}

const ::std::string&
Chat::NoSuchUserExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoSuchUserExist";
    return typeId;
}

Chat::NoSuchRoomExist::~NoSuchRoomExist()
{
}

const ::std::string&
Chat::NoSuchRoomExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoSuchRoomExist";
    return typeId;
}

Chat::RoomAlreadyExist::~RoomAlreadyExist()
{
}

const ::std::string&
Chat::RoomAlreadyExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomAlreadyExist";
    return typeId;
}

Chat::NoResourcesAvailable::~NoResourcesAvailable()
{
}

const ::std::string&
Chat::NoResourcesAvailable::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoResourcesAvailable";
    return typeId;
}

bool
Chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector<::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

::std::string
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
    static const ::std::string typeId = "::Chat::User";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::User::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_where;
    ::std::shared_ptr<UserPrx> iceP_who;
    ::std::string iceP_message;
    istr->readAll(iceP_where, iceP_who, iceP_message);
    inS.endReadParams();
    this->SendMessage(::std::move(iceP_where), ::std::move(iceP_who), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_SendPrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    ::std::string iceP_message;
    istr->readAll(iceP_who, iceP_message);
    inS.endReadParams();
    this->SendPrivateMessage(::std::move(iceP_who), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_ops, iceC_Chat_User_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_ops)
    {
        case 0:
        {
            return _iceD_SendMessage(in, current);
        }
        case 1:
        {
            return _iceD_SendPrivateMessage(in, current);
        }
        case 2:
        {
            return _iceD_getName(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::Server::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Server_ids, iceC_Chat_Server_ids + 2, s);
}

::std::vector<::std::string>
Chat::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Server_ids[0], &iceC_Chat_Server_ids[2]);
}

::std::string
Chat::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Server::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Server";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Server::_iceD_CreateRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->CreateRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_FindRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->FindRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_RegisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<RoomFactoryPrx> iceP_factory;
    istr->readAll(iceP_factory);
    inS.endReadParams();
    this->RegisterRoomFactory(::std::move(iceP_factory), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_UnregisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<RoomFactoryPrx> iceP_factory;
    istr->readAll(iceP_factory);
    inS.endReadParams();
    this->UnregisterRoomFactory(::std::move(iceP_factory), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Server_ops, iceC_Chat_Server_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Server_ops)
    {
        case 0:
        {
            return _iceD_CreateRoom(in, current);
        }
        case 1:
        {
            return _iceD_FindRoom(in, current);
        }
        case 2:
        {
            return _iceD_RegisterRoomFactory(in, current);
        }
        case 3:
        {
            return _iceD_UnregisterRoomFactory(in, current);
        }
        case 4:
        {
            return _iceD_getRooms(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::Room::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector<::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

::std::string
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    UserList ret = this->getUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_AddUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->AddUser(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    ::std::string iceP_message;
    istr->readAll(iceP_who, iceP_message);
    inS.endReadParams();
    this->SendMessage(::std::move(iceP_who), ::std::move(iceP_message), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_Destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->Destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_LeaveRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->LeaveRoom(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_ops, iceC_Chat_Room_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_ops)
    {
        case 0:
        {
            return _iceD_AddUser(in, current);
        }
        case 1:
        {
            return _iceD_Destroy(in, current);
        }
        case 2:
        {
            return _iceD_LeaveRoom(in, current);
        }
        case 3:
        {
            return _iceD_SendMessage(in, current);
        }
        case 4:
        {
            return _iceD_getName(in, current);
        }
        case 5:
        {
            return _iceD_getUsers(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::RoomFactory::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_RoomFactory_ids, iceC_Chat_RoomFactory_ids + 2, s);
}

::std::vector<::std::string>
Chat::RoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_RoomFactory_ids[0], &iceC_Chat_RoomFactory_ids[2]);
}

::std::string
Chat::RoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::RoomFactory::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomFactory";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->createRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_RoomFactory_ops, iceC_Chat_RoomFactory_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_RoomFactory_ops)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRooms(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_SendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_where, const ::std::shared_ptr<UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_SendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_where, iceP_who, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_SendPrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_SendPrivateMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name);
    outAsync->invoke(iceC_Chat_User_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
Chat::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_CreateRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_CreateRoom_name);
    outAsync->invoke(iceC_Chat_Server_CreateRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NoResourcesAvailable&)
            {
                throw;
            }
            catch(const RoomAlreadyExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RoomList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_getRooms_name);
    outAsync->invoke(iceC_Chat_Server_getRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_FindRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_FindRoom_name);
    outAsync->invoke(iceC_Chat_Server_FindRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NoSuchRoomExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_RegisterRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<RoomFactoryPrx>& iceP_factory, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Server_RegisterRoomFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_factory);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_UnregisterRoomFactory(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<RoomFactoryPrx>& iceP_factory, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Server_UnregisterRoomFactory_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_factory);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::ServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerPrx>();
}
/// \endcond

const ::std::string&
Chat::ServerPrx::ice_staticId()
{
    return Server::ice_staticId();
}

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name);
    outAsync->invoke(iceC_Chat_Room_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<UserList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getUsers_name);
    outAsync->invoke(iceC_Chat_Room_getUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_AddUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_AddUser_name);
    outAsync->invoke(iceC_Chat_Room_AddUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_SendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_SendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who, iceP_message);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_Destroy(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_Destroy_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_LeaveRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_Room_LeaveRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::RoomPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RoomPrx>();
}
/// \endcond

const ::std::string&
Chat::RoomPrx::ice_staticId()
{
    return Room::ice_staticId();
}

/// \cond INTERNAL
void
Chat::RoomFactoryPrx::_iceI_createRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_createRoom_name);
    outAsync->invoke(iceC_Chat_RoomFactory_createRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomFactoryPrx::_iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<RoomList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_getRooms_name);
    outAsync->invoke(iceC_Chat_RoomFactory_getRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::RoomFactoryPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RoomFactoryPrx>();
}
/// \endcond

const ::std::string&
Chat::RoomFactoryPrx::ice_staticId()
{
    return RoomFactory::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Chat_User_SendMessage_name = "SendMessage";

const ::std::string iceC_Chat_User_SendPrivateMessage_name = "SendPrivateMessage";

const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_Server_CreateRoom_name = "CreateRoom";

const ::std::string iceC_Chat_Server_getRooms_name = "getRooms";

const ::std::string iceC_Chat_Server_FindRoom_name = "FindRoom";

const ::std::string iceC_Chat_Server_RegisterRoomFactory_name = "RegisterRoomFactory";

const ::std::string iceC_Chat_Server_UnregisterRoomFactory_name = "UnregisterRoomFactory";

const ::std::string iceC_Chat_Room_getName_name = "getName";

const ::std::string iceC_Chat_Room_getUsers_name = "getUsers";

const ::std::string iceC_Chat_Room_AddUser_name = "AddUser";

const ::std::string iceC_Chat_Room_SendMessage_name = "SendMessage";

const ::std::string iceC_Chat_Room_Destroy_name = "Destroy";

const ::std::string iceC_Chat_Room_LeaveRoom_name = "LeaveRoom";

const ::std::string iceC_Chat_RoomFactory_createRoom_name = "createRoom";

const ::std::string iceC_Chat_RoomFactory_getRooms_name = "getRooms";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyExists> iceC_Chat_UserAlreadyExists_init("::Chat::UserAlreadyExists");

}

Chat::UserAlreadyExists::~UserAlreadyExists() throw()
{
}

::std::string
Chat::UserAlreadyExists::ice_id() const
{
    return "::Chat::UserAlreadyExists";
}

Chat::UserAlreadyExists*
Chat::UserAlreadyExists::ice_clone() const
{
    return new UserAlreadyExists(*this);
}

void
Chat::UserAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserAlreadyExists", -1, true);
    ::Ice::StreamWriter< UserAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchUserExist> iceC_Chat_NoSuchUserExist_init("::Chat::NoSuchUserExist");

}

Chat::NoSuchUserExist::~NoSuchUserExist() throw()
{
}

::std::string
Chat::NoSuchUserExist::ice_id() const
{
    return "::Chat::NoSuchUserExist";
}

Chat::NoSuchUserExist*
Chat::NoSuchUserExist::ice_clone() const
{
    return new NoSuchUserExist(*this);
}

void
Chat::NoSuchUserExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoSuchUserExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoSuchUserExist", -1, true);
    ::Ice::StreamWriter< NoSuchUserExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoSuchUserExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchUserExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchRoomExist> iceC_Chat_NoSuchRoomExist_init("::Chat::NoSuchRoomExist");

}

Chat::NoSuchRoomExist::~NoSuchRoomExist() throw()
{
}

::std::string
Chat::NoSuchRoomExist::ice_id() const
{
    return "::Chat::NoSuchRoomExist";
}

Chat::NoSuchRoomExist*
Chat::NoSuchRoomExist::ice_clone() const
{
    return new NoSuchRoomExist(*this);
}

void
Chat::NoSuchRoomExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoSuchRoomExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoSuchRoomExist", -1, true);
    ::Ice::StreamWriter< NoSuchRoomExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoSuchRoomExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoSuchRoomExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomAlreadyExist> iceC_Chat_RoomAlreadyExist_init("::Chat::RoomAlreadyExist");

}

Chat::RoomAlreadyExist::~RoomAlreadyExist() throw()
{
}

::std::string
Chat::RoomAlreadyExist::ice_id() const
{
    return "::Chat::RoomAlreadyExist";
}

Chat::RoomAlreadyExist*
Chat::RoomAlreadyExist::ice_clone() const
{
    return new RoomAlreadyExist(*this);
}

void
Chat::RoomAlreadyExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::RoomAlreadyExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::RoomAlreadyExist", -1, true);
    ::Ice::StreamWriter< RoomAlreadyExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomAlreadyExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomAlreadyExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoResourcesAvailable> iceC_Chat_NoResourcesAvailable_init("::Chat::NoResourcesAvailable");

}

Chat::NoResourcesAvailable::~NoResourcesAvailable() throw()
{
}

::std::string
Chat::NoResourcesAvailable::ice_id() const
{
    return "::Chat::NoResourcesAvailable";
}

Chat::NoResourcesAvailable*
Chat::NoResourcesAvailable::ice_clone() const
{
    return new NoResourcesAvailable(*this);
}

void
Chat::NoResourcesAvailable::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoResourcesAvailable::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoResourcesAvailable", -1, true);
    ::Ice::StreamWriter< NoResourcesAvailable, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoResourcesAvailable::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoResourcesAvailable, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(User* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_SendMessage(const ::std::string& iceP_where, const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_SendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_SendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_where);
        ostr->write(iceP_who);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_SendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_SendMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_SendMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_SendPrivateMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_SendPrivateMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_SendPrivateMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_SendPrivateMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_SendPrivateMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_SendPrivateMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Server* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Server>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Server;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_CreateRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_CreateRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_CreateRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_CreateRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_CreateRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Server::end_CreateRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_CreateRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NoResourcesAvailable&)
        {
            throw;
        }
        catch(const ::Chat::RoomAlreadyExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_getRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_getRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_getRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_getRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Server_getRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomList
IceProxy::Chat::Server::end_getRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_getRooms_name);
    ::Chat::RoomList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_FindRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_FindRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_FindRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_FindRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_FindRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Server::end_FindRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_FindRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NoSuchRoomExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& iceP_factory, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_RegisterRoomFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_RegisterRoomFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_factory);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_RegisterRoomFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Server::end_RegisterRoomFactory(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Server_RegisterRoomFactory_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& iceP_factory, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_UnregisterRoomFactory_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_UnregisterRoomFactory_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_factory);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_UnregisterRoomFactory_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Server::end_UnregisterRoomFactory(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Server_UnregisterRoomFactory_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Server::_newInstance() const
{
    return new Server;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Server::ice_staticId()
{
    return ::Chat::Server::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Room* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Room>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Room;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::Room::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserList
IceProxy::Chat::Room::end_getUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getUsers_name);
    ::Chat::UserList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_AddUser(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_AddUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_AddUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_AddUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_AddUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_AddUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_AddUser_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_SendMessage(const ::Chat::UserPrx& iceP_who, const ::std::string& iceP_message, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_SendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_SendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        ostr->write(iceP_message);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_SendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_SendMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_SendMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_Destroy(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_Destroy_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_Destroy_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_Destroy_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_Destroy(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_Destroy_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_LeaveRoom(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_LeaveRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_LeaveRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_LeaveRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_LeaveRoom(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_Room_LeaveRoom_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Room::_newInstance() const
{
    return new Room;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Room::ice_staticId()
{
    return ::Chat::Room::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(RoomFactory* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< RoomFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new RoomFactory;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::_iceI_begin_createRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_createRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_RoomFactory_createRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_RoomFactory_createRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_RoomFactory_createRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::RoomFactory::end_createRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_RoomFactory_createRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::_iceI_begin_getRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_RoomFactory_getRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_RoomFactory_getRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_RoomFactory_getRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_RoomFactory_getRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomList
IceProxy::Chat::RoomFactory::end_getRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_RoomFactory_getRooms_name);
    ::Chat::RoomList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::RoomFactory::_newInstance() const
{
    return new RoomFactory;
}
/// \endcond

const ::std::string&
IceProxy::Chat::RoomFactory::ice_staticId()
{
    return ::Chat::RoomFactory::ice_staticId();
}

Chat::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return iceC_Chat_User_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::User::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_where;
    UserPrx iceP_who;
    ::std::string iceP_message;
    istr->read(iceP_where);
    istr->read(iceP_who);
    istr->read(iceP_message);
    inS.endReadParams();
    this->SendMessage(iceP_where, iceP_who, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_SendPrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    ::std::string iceP_message;
    istr->read(iceP_who);
    istr->read(iceP_message);
    inS.endReadParams();
    this->SendPrivateMessage(iceP_who, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_User_all[] =
{
    "SendMessage",
    "SendPrivateMessage",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_all, iceC_Chat_User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_all)
    {
        case 0:
        {
            return _iceD_SendMessage(in, current);
        }
        case 1:
        {
            return _iceD_SendPrivateMessage(in, current);
        }
        case 2:
        {
            return _iceD_getName(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

Chat::Server::~Server()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Server* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Server_ids[2] =
{
    "::Chat::Server",
    "::Ice::Object"
};

}

bool
Chat::Server::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Server_ids, iceC_Chat_Server_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Server_ids[0], &iceC_Chat_Server_ids[2]);
}

const ::std::string&
Chat::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Server::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Server";
    return typeId;
#else
    return iceC_Chat_Server_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Server::_iceD_CreateRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->CreateRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_FindRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->FindRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_RegisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RoomFactoryPrx iceP_factory;
    istr->read(iceP_factory);
    inS.endReadParams();
    this->RegisterRoomFactory(iceP_factory, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_UnregisterRoomFactory(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    RoomFactoryPrx iceP_factory;
    istr->read(iceP_factory);
    inS.endReadParams();
    this->UnregisterRoomFactory(iceP_factory, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Server_all[] =
{
    "CreateRoom",
    "FindRoom",
    "RegisterRoomFactory",
    "UnregisterRoomFactory",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Chat::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Server_all, iceC_Chat_Server_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Server_all)
    {
        case 0:
        {
            return _iceD_CreateRoom(in, current);
        }
        case 1:
        {
            return _iceD_FindRoom(in, current);
        }
        case 2:
        {
            return _iceD_RegisterRoomFactory(in, current);
        }
        case 3:
        {
            return _iceD_UnregisterRoomFactory(in, current);
        }
        case 4:
        {
            return _iceD_getRooms(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Server::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Server, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Server::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Server, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(ServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Server::ice_staticId(), v);
    }
}
/// \endcond

Chat::Room::~Room()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Room* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};

}

bool
Chat::Room::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

const ::std::string&
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
#else
    return iceC_Chat_Room_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    UserList ret = this->getUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_AddUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->AddUser(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_SendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    ::std::string iceP_message;
    istr->read(iceP_who);
    istr->read(iceP_message);
    inS.endReadParams();
    this->SendMessage(iceP_who, iceP_message, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_Destroy(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->Destroy(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_LeaveRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->LeaveRoom(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_all[] =
{
    "AddUser",
    "Destroy",
    "LeaveRoom",
    "SendMessage",
    "getName",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_all, iceC_Chat_Room_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_all)
    {
        case 0:
        {
            return _iceD_AddUser(in, current);
        }
        case 1:
        {
            return _iceD_Destroy(in, current);
        }
        case 2:
        {
            return _iceD_LeaveRoom(in, current);
        }
        case 3:
        {
            return _iceD_SendMessage(in, current);
        }
        case 4:
        {
            return _iceD_getName(in, current);
        }
        case 5:
        {
            return _iceD_getUsers(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Room::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Room, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Room::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Room, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(RoomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RoomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Room::ice_staticId(), v);
    }
}
/// \endcond

Chat::RoomFactory::~RoomFactory()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(RoomFactory* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_RoomFactory_ids[2] =
{
    "::Chat::RoomFactory",
    "::Ice::Object"
};

}

bool
Chat::RoomFactory::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_RoomFactory_ids, iceC_Chat_RoomFactory_ids + 2, s);
}

::std::vector< ::std::string>
Chat::RoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_RoomFactory_ids[0], &iceC_Chat_RoomFactory_ids[2]);
}

const ::std::string&
Chat::RoomFactory::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::RoomFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::RoomFactory";
    return typeId;
#else
    return iceC_Chat_RoomFactory_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_createRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->createRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    RoomList ret = this->getRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_RoomFactory_all[] =
{
    "createRoom",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

/// \cond INTERNAL
bool
Chat::RoomFactory::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_RoomFactory_all, iceC_Chat_RoomFactory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_RoomFactory_all)
    {
        case 0:
        {
            return _iceD_createRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRooms(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::RoomFactory::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< RoomFactory, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomFactory::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomFactory, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(RoomFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RoomFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(RoomFactory::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
